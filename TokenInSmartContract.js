const {
  Client,
  AccountId,
  PrivateKey,
  TopicCreateTransaction,
  TopicInfoQuery,
  TopicUpdateTransaction,
  TopicMessageSubmitTransaction,
  ContractExecuteTransaction,
  ContractCreateFlow,
  TokenId,
  ContractFunctionParameters,
  TopicMessageQuery,

  AccountCreateTransaction,
  FileCreateTransaction,
  Hbar,
  TokenAssociateTransaction,
  AccountBalanceQuery,
  ContractInfoQuery,
  TokenInfoQuery,
  ContractId,
} = require("@hashgraph/sdk");
const fs = require("fs");
const path = require("path");
require("dotenv").config({ path: path.resolve(__dirname, "./.env") });

const operatorId = AccountId.fromString(process.env.MY_ACCOUNT_ID);
const operatorKey = PrivateKey.fromString(process.env.MY_PRIVATE_KEY);

const client = Client.forTestnet();
client.setOperator(operatorId, operatorKey);
async function main() {
  const privatekey = PrivateKey.generateED25519();
  const accountAlice = await new AccountCreateTransaction()
    .setKey(privatekey.publicKey)
    .setInitialBalance(new Hbar(100))
    .execute(client);
  const accountAliceId = (await accountAlice.getReceipt(client)).accountId;
  console.log("Alice Account Id : ", accountAliceId.toString());
  //Get the contract bytecode
  const bytecode =
    "608060405234801561001057600080fd5b50610d69806100206000396000f3fe60806040526004361061002d5760003560e01c8063a491b48a1461003c578063beabacc81461006c5761002e565b5b34801561003a57600080fd5b005b6100566004803603810190610051919061060f565b610095565b6040516100639190610703565b60405180910390f35b34801561007857600080fd5b50610093600480360381019061008e919061074a565b61012d565b005b600061009f61038e565b86816000018190525085816020018190525030816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506100f330846101b1565b81610100018190525060008061010a83888861020f565b91509150601660030b821461011e57600080fd5b80935050505095945050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016101689291906107ac565b6020604051808303816000875af1158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab919061080d565b50505050565b6101b9610400565b82816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816040019063ffffffff16908163ffffffff168152505092915050565b6000808460008161010001516000015163ffffffff16148015610241575060008161010001516040015163ffffffff16145b15610267576276a7008161010001516040019063ffffffff16908163ffffffff16815250505b60008061016773ffffffffffffffffffffffffffffffffffffffff1634637812a04b60e01b8a8a8a6040516024016102a193929190610beb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161030b9190610c65565b60006040518083038185875af1925050503d8060008114610348576040519150601f19603f3d011682016040523d82523d6000602084013e61034d565b606091505b5091509150816103605760156000610375565b808060200190518101906103749190610cf3565b5b8160030b91508095508196505050505050935093915050565b6040518061012001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600015158152602001600063ffffffff168152602001600015158152602001606081526020016103fa610400565b81525090565b6040518060600160405280600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104aa82610461565b810181811067ffffffffffffffff821117156104c9576104c8610472565b5b80604052505050565b60006104dc610443565b90506104e882826104a1565b919050565b600067ffffffffffffffff82111561050857610507610472565b5b61051182610461565b9050602081019050919050565b82818337600083830152505050565b600061054061053b846104ed565b6104d2565b90508281526020810184848401111561055c5761055b61045c565b5b61056784828561051e565b509392505050565b600082601f83011261058457610583610457565b5b813561059484826020860161052d565b91505092915050565b6000819050919050565b6105b08161059d565b81146105bb57600080fd5b50565b6000813590506105cd816105a7565b92915050565b600063ffffffff82169050919050565b6105ec816105d3565b81146105f757600080fd5b50565b600081359050610609816105e3565b92915050565b600080600080600060a0868803121561062b5761062a61044d565b5b600086013567ffffffffffffffff81111561064957610648610452565b5b6106558882890161056f565b955050602086013567ffffffffffffffff81111561067657610675610452565b5b6106828882890161056f565b9450506040610693888289016105be565b93505060606106a4888289016105be565b92505060806106b5888289016105fa565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ed826106c2565b9050919050565b6106fd816106e2565b82525050565b600060208201905061071860008301846106f4565b92915050565b610727816106e2565b811461073257600080fd5b50565b6000813590506107448161071e565b92915050565b6000806000606084860312156107635761076261044d565b5b600061077186828701610735565b935050602061078286828701610735565b9250506040610793868287016105be565b9150509250925092565b6107a68161059d565b82525050565b60006040820190506107c160008301856106f4565b6107ce602083018461079d565b9392505050565b60008115159050919050565b6107ea816107d5565b81146107f557600080fd5b50565b600081519050610807816107e1565b92915050565b6000602082840312156108235761082261044d565b5b6000610831848285016107f8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610874578082015181840152602081019050610859565b83811115610883576000848401525b50505050565b60006108948261083a565b61089e8185610845565b93506108ae818560208601610856565b6108b781610461565b840191505092915050565b6108cb816106e2565b82525050565b6108da816107d5565b82525050565b6108e9816105d3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109248161059d565b82525050565b600081519050919050565b600082825260208201905092915050565b60006109518261092a565b61095b8185610935565b935061096b818560208601610856565b61097481610461565b840191505092915050565b600060a08301600083015161099760008601826108d1565b5060208301516109aa60208601826108c2565b50604083015184820360408601526109c28282610946565b915050606083015184820360608601526109dc8282610946565b91505060808301516109f160808601826108c2565b508091505092915050565b6000604083016000830151610a14600086018261091b565b5060208301518482036020860152610a2c828261097f565b9150508091505092915050565b6000610a4583836109fc565b905092915050565b6000602082019050919050565b6000610a65826108ef565b610a6f81856108fa565b935083602082028501610a818561090b565b8060005b85811015610abd5784840389528151610a9e8582610a39565b9450610aa983610a4d565b925060208a01995050600181019050610a85565b50829750879550505050505092915050565b606082016000820151610ae560008501826108e0565b506020820151610af860208501826108c2565b506040820151610b0b60408501826108e0565b50505050565b6000610160830160008301518482036000860152610b2f8282610889565b91505060208301518482036020860152610b498282610889565b9150506040830151610b5e60408601826108c2565b5060608301518482036060860152610b768282610889565b9150506080830151610b8b60808601826108d1565b5060a0830151610b9e60a08601826108e0565b5060c0830151610bb160c08601826108d1565b5060e083015184820360e0860152610bc98282610a5a565b915050610100830151610be0610100860182610acf565b508091505092915050565b60006060820190508181036000830152610c058186610b11565b9050610c14602083018561079d565b610c21604083018461079d565b949350505050565b600081905092915050565b6000610c3f8261092a565b610c498185610c29565b9350610c59818560208601610856565b80840191505092915050565b6000610c718284610c34565b915081905092915050565b60008160030b9050919050565b610c9281610c7c565b8114610c9d57600080fd5b50565b600081519050610caf81610c89565b92915050565b6000610cc0826106c2565b9050919050565b610cd081610cb5565b8114610cdb57600080fd5b50565b600081519050610ced81610cc7565b92915050565b60008060408385031215610d0a57610d0961044d565b5b6000610d1885828601610ca0565b9250506020610d2985828601610cde565b915050925092905056fea264697066735822122041489883006cde022b8113c7b3bc5f0dd276a425ed891f39d4f982bb827eb36864736f6c634300080e0033";
  const bytecode2 =
    "608060405234801561001057600080fd5b50610f0b806100206000396000f3fe60806040526004361061002d5760003560e01c80633ad84eea1461003c578063a491b48a146100655761002e565b5b34801561003a57600080fd5b005b34801561004857600080fd5b50610063600480360381019061005e91906105e4565b610095565b005b61007f600480360381019061007a91906107ef565b6100f1565b60405161008c91906108b1565b60405180910390f35b60006100a384308585610189565b9050601660030b81146100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e290610929565b60405180910390fd5b50505050565b60006100fb610484565b86816000018190525085816020018190525030816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061014f30846102a7565b816101000181905250600080610166838888610305565b91509150601660030b821461017a57600080fd5b80935050505095945050505050565b600080600061016773ffffffffffffffffffffffffffffffffffffffff1663eca3691760e01b888888886040516024016101c69493929190610958565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102309190610a0e565b6000604051808303816000865af19150503d806000811461026d576040519150601f19603f3d011682016040523d82523d6000602084013e610272565b606091505b509150915081610283576015610298565b808060200190518101906102979190610a5e565b5b60030b92505050949350505050565b6102af6104f6565b82816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816040019063ffffffff16908163ffffffff168152505092915050565b6000808460008161010001516000015163ffffffff16148015610337575060008161010001516040015163ffffffff16145b1561035d576276a7008161010001516040019063ffffffff16908163ffffffff16815250505b60008061016773ffffffffffffffffffffffffffffffffffffffff1634637812a04b60e01b8a8a8a60405160240161039793929190610e19565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104019190610a0e565b60006040518083038185875af1925050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b509150915081610456576015600061046b565b8080602001905181019061046a9190610e95565b5b8160030b91508095508196505050505050935093915050565b6040518061012001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600015158152602001600063ffffffff168152602001600015158152602001606081526020016104f06104f6565b81525090565b6040518060600160405280600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105788261054d565b9050919050565b6105888161056d565b811461059357600080fd5b50565b6000813590506105a58161057f565b92915050565b60008160070b9050919050565b6105c1816105ab565b81146105cc57600080fd5b50565b6000813590506105de816105b8565b92915050565b6000806000606084860312156105fd576105fc610543565b5b600061060b86828701610596565b935050602061061c86828701610596565b925050604061062d868287016105cf565b9150509250925092565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61068a82610641565b810181811067ffffffffffffffff821117156106a9576106a8610652565b5b80604052505050565b60006106bc610539565b90506106c88282610681565b919050565b600067ffffffffffffffff8211156106e8576106e7610652565b5b6106f182610641565b9050602081019050919050565b82818337600083830152505050565b600061072061071b846106cd565b6106b2565b90508281526020810184848401111561073c5761073b61063c565b5b6107478482856106fe565b509392505050565b600082601f83011261076457610763610637565b5b813561077484826020860161070d565b91505092915050565b6000819050919050565b6107908161077d565b811461079b57600080fd5b50565b6000813590506107ad81610787565b92915050565b600063ffffffff82169050919050565b6107cc816107b3565b81146107d757600080fd5b50565b6000813590506107e9816107c3565b92915050565b600080600080600060a0868803121561080b5761080a610543565b5b600086013567ffffffffffffffff81111561082957610828610548565b5b6108358882890161074f565b955050602086013567ffffffffffffffff81111561085657610855610548565b5b6108628882890161074f565b94505060406108738882890161079e565b93505060606108848882890161079e565b9250506080610895888289016107da565b9150509295509295909350565b6108ab8161056d565b82525050565b60006020820190506108c660008301846108a2565b92915050565b600082825260208201905092915050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000610913600f836108cc565b915061091e826108dd565b602082019050919050565b6000602082019050818103600083015261094281610906565b9050919050565b610952816105ab565b82525050565b600060808201905061096d60008301876108a2565b61097a60208301866108a2565b61098760408301856108a2565b6109946060830184610949565b95945050505050565b600081519050919050565b600081905092915050565b60005b838110156109d15780820151818401526020810190506109b6565b60008484015250505050565b60006109e88261099d565b6109f281856109a8565b9350610a028185602086016109b3565b80840191505092915050565b6000610a1a82846109dd565b915081905092915050565b60008160030b9050919050565b610a3b81610a25565b8114610a4657600080fd5b50565b600081519050610a5881610a32565b92915050565b600060208284031215610a7457610a73610543565b5b6000610a8284828501610a49565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000610ab282610a8b565b610abc8185610a96565b9350610acc8185602086016109b3565b610ad581610641565b840191505092915050565b610ae98161056d565b82525050565b60008115159050919050565b610b0481610aef565b82525050565b610b13816107b3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b4e8161077d565b82525050565b600082825260208201905092915050565b6000610b708261099d565b610b7a8185610b54565b9350610b8a8185602086016109b3565b610b9381610641565b840191505092915050565b600060a083016000830151610bb66000860182610afb565b506020830151610bc96020860182610ae0565b5060408301518482036040860152610be18282610b65565b91505060608301518482036060860152610bfb8282610b65565b9150506080830151610c106080860182610ae0565b508091505092915050565b6000604083016000830151610c336000860182610b45565b5060208301518482036020860152610c4b8282610b9e565b9150508091505092915050565b6000610c648383610c1b565b905092915050565b6000602082019050919050565b6000610c8482610b19565b610c8e8185610b24565b935083602082028501610ca085610b35565b8060005b85811015610cdc5784840389528151610cbd8582610c58565b9450610cc883610c6c565b925060208a01995050600181019050610ca4565b50829750879550505050505092915050565b606082016000820151610d046000850182610b0a565b506020820151610d176020850182610ae0565b506040820151610d2a6040850182610b0a565b50505050565b6000610160830160008301518482036000860152610d4e8282610aa7565b91505060208301518482036020860152610d688282610aa7565b9150506040830151610d7d6040860182610ae0565b5060608301518482036060860152610d958282610aa7565b9150506080830151610daa6080860182610afb565b5060a0830151610dbd60a0860182610b0a565b5060c0830151610dd060c0860182610afb565b5060e083015184820360e0860152610de88282610c79565b915050610100830151610dff610100860182610cee565b508091505092915050565b610e138161077d565b82525050565b60006060820190508181036000830152610e338186610d30565b9050610e426020830185610e0a565b610e4f6040830184610e0a565b949350505050565b6000610e628261054d565b9050919050565b610e7281610e57565b8114610e7d57600080fd5b50565b600081519050610e8f81610e69565b92915050565b60008060408385031215610eac57610eab610543565b5b6000610eba85828601610a49565b9250506020610ecb85828601610e80565b915050925092905056fea2646970667358221220b6d39ae48b1fd802819fcc6092aacdd4573a46d06d0dd90fd47addeafa2c3f5464736f6c63430008110033";
  const contractCreate = new ContractCreateFlow()
    .setGas(10000000)
    .setBytecode(bytecode);

  //Sign the transaction with the client operator key and submit to a Hedera network
  const txResponse = contractCreate.execute(client);

  //Get the receipt of the transaction
  const receipt = (await txResponse).getReceipt(client);
  const contractid = (await receipt).contractId;
  console.log("Contract Id : ", contractid.toString());
  // Create FT using TokenSender create function
  // The treasury will be the smart contract itself , so we don't need to sign the transaction of creation and of the transfer
  const createToken = new ContractExecuteTransaction()
    .setContractId(contractid)
    .setGas(300000) // Increase if revert
    .setPayableAmount(20) // Increase if revert
    .setFunction(
      "createFungible",
      new ContractFunctionParameters()
        .addString("USD Bar") // FT name
        .addString("USDB") // FT symbol
        // now we have just created 100 token because decimals = 2 (100.00)
        .addUint256(10000) // FT initial supply
        .addUint256(2) // FT decimals
        .addUint32(7000000)
    );

  const createTokenTx = await createToken.execute(client);
  const createTokenRx = await createTokenTx.getRecord(client);
  const tokenIdSolidityAddr =
    createTokenRx.contractFunctionResult.getAddress(0);
  const tokenId = TokenId.fromSolidityAddress(tokenIdSolidityAddr);

  console.log(`Token created with ID: ${tokenId}`);

  const associateTx = await (
    await new TokenAssociateTransaction()
      .setAccountId(accountAliceId)
      .setTokenIds([tokenId])
      .freezeWith(client)
      .sign(privatekey)
  ).execute(client);
  console.log(
    "Transacion status " +
      (await associateTx.getReceipt(client)).status.toString()
  );

  // Exécuter le transfert de token de TokenSender à Alice
  const tokenTransfer = new ContractExecuteTransaction()
    .setContractId(contractid) // ID du contrat
    .setGas(1500000) // Augmenter si revert
    .setFunction(
      "transfer",
      new ContractFunctionParameters()
        .addAddress(tokenId.toSolidityAddress()) // ID du token
        .addAddress(accountAliceId.toSolidityAddress()) // ID du récepteur du token
        .addUint256(1000) // Montant du token , decimal =2 so we have  10 tokens
    );
  const tokenTransferTx = await tokenTransfer.execute(client);
  const tokenTransferRx = await tokenTransferTx.getReceipt(client);

  const tokenTransferStatus = tokenTransferRx.status;

  console.log(
    "Statut de la transaction de transfert de token : " +
      tokenTransferStatus.toString()
  );

  await showBalance(accountAliceId, "Alice", tokenId);
}

async function showBalance(accountId, name, tokenId) {
  const balanceQuery = new AccountBalanceQuery().setAccountId(accountId);

  const balance = await balanceQuery.execute(client);

  console.log(`${name}'s balance: ${balance.tokens.get(tokenId) / 100} USDB`);
}
main();

// async function test() {
//   // const TokenInfo = await new TokenInfoQuery()
//   //   .setTokenId(TokenId.fromString("0.0.7649932"))
//   //   .execute(client);
//   // const contractInfo = await new ContractInfoQuery()
//   //   .setContractId(ContractId.fromString("0.0.7649931"))
//   //   .execute(client);
//   // console.log(contractInfo.balance);
//   // // console.log(TokenInfo.treasuryAccountId.toString());
//   // // await showBalance(TokenInfo.treasuryAccountId, "Treasury");

//   const tokenTransfer = new ContractExecuteTransaction()
//     .setContractId(ContractId.fromString("0.0.7650147")) // ID du contrat
//     .setGas(1500000) // Augmenter si revert
//     .setFunction(
//       "transfer",
//       new ContractFunctionParameters()
//         .addAddress(TokenId.fromString("0.0.7650148").toSolidityAddress()) // ID du token
//         .addAddress(AccountId.fromString("0.0.7650145").toSolidityAddress()) // ID du récepteur du token
//         .addUint256(1000) // Montant du token
//     );
//   const tokenTransferTx = await tokenTransfer.execute(client);

//   console.log((await tokenTransferTx.getReceipt(client)).status.toString());
// }

// test();
// // main();
